<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zrz.zblog.dao.BlogMapper">

    <resultMap id="BaseResultMap" type="Blog">
        <id column="blog_id" property="blogId"/>
        <result column="blog_title" property="blogTitle"/>
        <result column="blog_sub_url" property="blogSubUrl"/>
        <result column="blog_sub_url" property="blogSubUrl"/>
        <result column="blog_cover_image" property="blogCoverImage"/>
        <result column="blog_category_id" property="blogCategoryId"/>
        <result column="blog_category_name" property="blogCategoryName"/>
        <result column="blog_tags" property="blogTags"/>
        <result column="blog_status" property="blogStatus"/>
        <result column="blog_views" property="blogViews"/>
        <result column="enable_comment" property="enableComment"/>
        <result column="is_deleted" property="isDeleted"/>
        <result column="create_time" property="createTime"/>
        <result column="update_time" property="updateTime"/>
    </resultMap>

    <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="Blog">
        <result column="blog_content" property="blogContent"/>
    </resultMap>

    <sql id="Base_Column_List">
        blog_id
        ,
        blog_title,
        blog_sub_url,
        blog_category_id,
        blog_category_name,
        blog_tags,
        blog_status,
        blog_views,
        enable_comment,
        is_deleted,
        create_time,
        update_time
    </sql>
    <sql id="Blob_Column_List">
        blog_content
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from blog
        where blog_id = #{blogId} and is_deleted = 0
    </select>
    <select id="findBlogList" parameterType="Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from blog
        where is_deleted=0
        <if test="keyword!=null">
            AND (blog_title like CONCAT('%','${keyword}','%' ) or blog_category_name like CONCAT('%','${keyword}','%' ))
        </if>
        <if test="blogStatus!=null">
            AND blog_status = #{blogStatus}
        </if>
        <if test="blogCategoryId!=null">
            AND blog_category_id = #{blogCategoryId}
        </if>
        order by blog_id desc
        <if test="start!=null and limit!=null">
            limit #{start},#{limit}
        </if>
    </select>

    <select id="getTotalBlogs" parameterType="Map" resultType="int">
        select count(*) from blog
        where is_deleted=0
        <if test="keyword!=null">
            AND (blog_title like CONCAT('%','${keyword}','%' ) or blog_category_name like CONCAT('%','${keyword}','%' ))
        </if>
        <if test="blogStatus!=null">
            AND blog_status = #{blogStatus}
        </if>
        <if test="blogCategoryId!=null">
            AND blog_category_id = #{blogCategoryId}
        </if>
    </select>

    <select id="findBlogListByType" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from blog
        where is_deleted=0 AND blog_status = 1<!-- 发布状态的文章 -->
        <if test="type!=null and type==0">
            order by blog_views desc
        </if>
        <if test="type!=null and type==1">
            order by blog_id desc
        </if>
        limit #{limit}
    </select>

    <select id="getBlogsPageByTagId" parameterType="Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from blog
        where blog_id IN (SELECT blog_id FROM blog_tag_relation WHERE tag_id = #{tagId})
        AND blog_status =1 AND is_deleted=0
        order by blog_id desc
        <if test="start!=null and limit!=null">
            limit #{start},#{limit}
        </if>
    </select>

    <select id="getTotalBlogsByTagId" parameterType="Map" resultType="int">
        select count(*)
        from blog
        where blog_id IN (SELECT blog_id FROM blog_tag_relation WHERE tag_id = #{tagId})
          AND blog_status = 1
          AND is_deleted = 0
    </select>

    <select id="selectBySubUrl" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
        select
        <include refid="Base_Column_List"/>
        ,
        <include refid="Blob_Column_List"/>
        from blog
        where blog_sub_url = #{subUrl} and is_deleted = 0 limit 1
    </select>

    <update id="deleteByPrimaryKey" parameterType="java.lang.Long">
        UPDATE blog
        SET is_deleted = 1
        where blog_id = #{blogId} and is_deleted = 0
    </update>
    <update id="deleteBatch">
        update blog
        set is_deleted=1 where blog_id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>
    <insert id="insert" parameterType="Blog">
        insert into tb_blog (blog_id, blog_title,blog_sub_url,  blog_category_id, blog_category_name,
                             blog_tags, blog_status, blog_views,
                             enable_comment, is_deleted, create_time,
                             update_time, blog_content)
        values (#{blogId}, #{blogTitle}, #{blogCategoryId}, #{blogCategoryName},
                #{blogTags}, #{blogStatus}, #{blogViews},
                #{enableComment}, #{isDeleted}, #{createTime},
                #{updateTime}, #{blogContent})
    </insert>
    <insert id="insertSelective" useGeneratedKeys="true" keyProperty="blogId"
            parameterType="Blog">
        insert into blog
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="blogId != null">
                blog_id,
            </if>
            <if test="blogTitle != null">
                blog_title,
            </if>
            <if test="blogSubUrl != null">
                blog_sub_url,
            </if>
            <if test="blogCategoryId != null">
                blog_category_id,
            </if>
            <if test="blogCategoryName != null">
                blog_category_name,
            </if>
            <if test="blogTags != null">
                blog_tags,
            </if>
            <if test="blogStatus != null">
                blog_status,
            </if>
            <if test="blogViews != null">
                blog_views,
            </if>
            <if test="enableComment != null">
                enable_comment,
            </if>
            <if test="isDeleted != null">
                is_deleted,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
            <if test="blogContent != null">
                blog_content,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="blogId != null">
                #{blogId},
            </if>
            <if test="blogTitle != null">
                #{blogTitle},
            </if>
            <if test="blogSubUrl != null">
                blog_sub_url = #{blogSubUrl,jdbcType=VARCHAR},
            </if>
            <if test="blogCategoryId != null">
                #{blogCategoryId},
            </if>
            <if test="blogCategoryName != null">
                #{blogCategoryName},
            </if>
            <if test="blogTags != null">
                #{blogTags},
            </if>
            <if test="blogStatus != null">
                #{blogStatus},
            </if>
            <if test="blogViews != null">
                #{blogViews},
            </if>
            <if test="enableComment != null">
                #{enableComment},
            </if>
            <if test="isDeleted != null">
                #{isDeleted},
            </if>
            <if test="createTime != null">
                #{createTime},
            </if>
            <if test="updateTime != null">
                #{updateTime},
            </if>
            <if test="blogContent != null">
                #{blogContent},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="Blog">
        update blog
        <set>
            <if test="blogTitle != null">
                blog_title = #{blogTitle},
            </if>
            <if test="blogSubUrl != null">
                blog_sub_url = #{blogSubUrl},
            </if>
            <if test="blogContent != null">
                blog_content = #{blogContent,},
            </if>
            <if test="blogCategoryId != null">
                blog_category_id = #{blogCategoryId},
            </if>
            <if test="blogCategoryName != null">
                blog_category_name = #{blogCategoryName},
            </if>
            <if test="blogTags != null">
                blog_tags = #{blogTags},
            </if>
            <if test="blogStatus != null">
                blog_status = #{blogStatus},
            </if>
            <if test="blogViews != null">
                blog_views = #{blogViews},
            </if>
            <if test="enableComment != null">
                enable_comment = #{enableComment},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime},
            </if>
            <if test="blogContent != null">
                blog_content = #{blogContent},
            </if>
        </set>
        where blog_id = #{blogId}
    </update>
    <update id="updateByPrimaryKeyWithBLOBs" parameterType="Blog">
        update blog
        set blog_title         = #{blogTitle},
            blog_sub_url = #{blogSubUrl},
            blog_category_id   = #{blogCategoryId},
            blog_category_name = #{blogCategoryName},
            blog_tags          = #{blogTags},
            blog_status        = #{blogStatus},
            blog_views         = #{blogViews},
            enable_comment     = #{enableComment},
            is_deleted         = #{isDeleted},
            create_time        = #{createTime},
            update_time        = #{updateTime},
            blog_content       = #{blogContent}
        where blog_id = #{blogId}
    </update>
    <update id="updateByPrimaryKey" parameterType="Blog">
        update blog
        set blog_title         = #{blogTitle},
            blog_sub_url = #{blogSubUrl},
            blog_category_id   = #{blogCategoryId},
            blog_category_name = #{blogCategoryName},
            blog_tags          = #{blogTags},
            blog_status        = #{blogStatus},
            blog_views         = #{blogViews},
            enable_comment     = #{enableComment},
            is_deleted         = #{isDeleted},
            create_time        = #{createTime},
            update_time        = #{updateTime}
        where blog_id = #{blogId}
    </update>
    <update id="updateBlogCategorys">
        update blog
        set blog_category_id = #{categoryId},
        blog_category_name = #{categoryName}
        where blog_category_id in
        <foreach item="id" collection="ids" open="(" separator="," close=")">
            #{id}
        </foreach>
        and is_deleted =0
    </update>
</mapper>
