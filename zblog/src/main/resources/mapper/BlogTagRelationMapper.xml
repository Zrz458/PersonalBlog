<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.zrz.zblog.dao.BlogTagRelationMapper">

    <resultMap id="BaseResultMap" type="BlogTagRelation">
        <id column="relation_id" property="relationId"/>
        <result column="blog_id" property="blogId"/>
        <result column="tag_id" property="tagId"/>
        <result column="create_time" property="createTime"/>
    </resultMap>

    <sql id="Base_Column_List">
    relation_id, blog_id, tag_id, create_time
  </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from blog_tag_relation
        where relation_id = #{relationId}
    </select>

    <select id="selectByBlogIdAndTagId" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from blog_tag_relation
        where blog_id = #{blogId} and tag_id = #{tagId} limit 1
    </select>

    <select id="selectDistinctTagIds" resultType="java.lang.Long">
        select
        DISTINCT(tag_id)
        from blog_tag_relation
        where tag_id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from blog_tag_relation
    where relation_id = #{relationId}
  </delete>
    <delete id="deleteByBlogId" parameterType="java.lang.Long">
        delete from blog_tag_relation
        where blog_id = #{blogId}
    </delete>
    <insert id="insert" parameterType="BlogTagRelation">
    insert into blog_tag_relation (relation_id, blog_id, tag_id,
      create_time)
    values (#{relationId}, #{blogId}, #{tagId},
      #{createTime})
  </insert>
    <insert id="insertSelective" parameterType="BlogTagRelation">
        insert into blog_tag_relation
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="relationId != null">
                relation_id,
            </if>
            <if test="blogId != null">
                blog_id,
            </if>
            <if test="tagId != null">
                tag_id,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="relationId != null">
                #{relationId},
            </if>
            <if test="blogId != null">
                #{blogId},
            </if>
            <if test="tagId != null">
                #{tagId},
            </if>
            <if test="createTime != null">
                #{createTime},
            </if>
        </trim>
    </insert>
    <insert id="batchInsert" parameterType="java.util.List">
        INSERT into blog_tag_relation(blog_id,tag_id)
        VALUES
        <foreach collection="relationList" item="item" separator=",">
            (#{item.blogId},#{item.tagId})
        </foreach>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="BlogTagRelation">
        update blog_tag_relation
        <set>
            <if test="blogId != null">
                blog_id = #{blogId},
            </if>
            <if test="tagId != null">
                tag_id = #{tagId},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
        </set>
        where relation_id = #{relationId}
    </update>
    <update id="updateByPrimaryKey" parameterType="BlogTagRelation">
    update blog_tag_relation
    set blog_id = #{blogId},
      tag_id = #{tagId},
      create_time = #{createTime}
    where relation_id = #{relationId}
  </update>
</mapper>