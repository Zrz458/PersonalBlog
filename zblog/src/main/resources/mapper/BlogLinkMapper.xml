<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zrz.zblog.dao.BlogLinkMapper">

    <resultMap id="BaseResultMap" type="BlogLink">
        <id column="link_id"  property="linkId"/>
        <result column="link_type"  property="linkType"/>
        <result column="link_name"  property="linkName"/>
        <result column="link_url"  property="linkUrl"/>
        <result column="link_description"  property="linkDescription"/>
        <result column="link_rank"  property="linkRank"/>
        <result column="is_deleted" property="isDeleted"/>
        <result column="create_time"  property="createTime"/>
    </resultMap>
    
    <sql id="Base_Column_List">
    link_id, link_type, link_name, link_url, link_description, link_rank, is_deleted, 
    create_time
  </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from link
        where link_id = #{linkId} AND is_deleted = 0
    </select>

    <update id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    UPDATE link SET is_deleted = 1
    where link_id = #{linkId,jdbcType=INTEGER} AND is_deleted = 0
    </update>

    <update id="deleteBatch">
        update link
        set is_deleted=1 where link_id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </update>

    <select id="findLinkList" parameterType="Map" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from link
        where is_deleted=0
        order by link_id desc
        <if test="start!=null and limit!=null">
            limit #{start},#{limit}
        </if>
    </select>

    <select id="getTotalLinks" parameterType="Map" resultType="int">
        select count(*)  from link
        where is_deleted=0
    </select>

    <insert id="insert" parameterType="BlogLink">
    insert into link (link_id, link_type, link_name,
      link_url, link_description, link_rank, 
      is_deleted, create_time)
    values (#{linkId}, #{linkType}, #{linkName},
      #{linkUrl}, #{linkDescription}, #{linkRank},
      #{isDeleted}, #{createTime})
    </insert>

    <insert id="insertSelective" parameterType="BlogLink">
        insert into link
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="linkId != null">
                link_id,
            </if>
            <if test="linkType != null">
                link_type,
            </if>
            <if test="linkName != null">
                link_name,
            </if>
            <if test="linkUrl != null">
                link_url,
            </if>
            <if test="linkDescription != null">
                link_description,
            </if>
            <if test="linkRank != null">
                link_rank,
            </if>
            <if test="isDeleted != null">
                is_deleted,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="linkId != null">
                #{linkId},
            </if>
            <if test="linkType != null">
                #{linkType},
            </if>
            <if test="linkName != null">
                #{linkName},
            </if>
            <if test="linkUrl != null">
                #{linkUrl},
            </if>
            <if test="linkDescription != null">
                #{linkDescription},
            </if>
            <if test="linkRank != null">
                #{linkRank},
            </if>
            <if test="isDeleted != null">
                #{isDeleted},
            </if>
            <if test="createTime != null">
                #{createTime},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="BlogLink">
        update link
        <set>
            <if test="linkType != null">
                link_type = #{linkType},
            </if>
            <if test="linkName != null">
                link_name = #{linkName},
            </if>
            <if test="linkUrl != null">
                link_url = #{linkUrl},
            </if>
            <if test="linkDescription != null">
                link_description = #{linkDescription},
            </if>
            <if test="linkRank != null">
                link_rank = #{linkRank},
            </if>
            <if test="isDeleted != null">
                is_deleted = #{isDeleted},
            </if>
            <if test="createTime != null">
                create_time = #{createTime},
            </if>
        </set>
        where link_id = #{linkId}
    </update>
    <update id="updateByPrimaryKey" parameterType="BlogLink">
    update link
    set link_type = #{linkType},
      link_name = #{linkName},
      link_url = #{linkUrl},
      link_description = #{linkDescription},
      link_rank = #{linkRank},
      is_deleted = #{isDeleted},
      create_time = #{createTime}
    where link_id = #{linkId}
  </update>
</mapper>